#!/bin/sh
###########################################################
# WiFi Watchdog Init Script
#
# Description:
# This script provides a "watchdog" for the WiFi connection
# on Linux embedded systems or lightweight servers. Its main
# goal is to ensure that the WiFi interface (wlan0) is always
# connected to the internet and to take automatic actions if
# connectivity fails.
#
# Features:
# 1. Connection monitoring:
#    - Periodically checks if the WiFi interface has an IP
#      and can ping 8.8.8.8 (Google DNS) to verify connectivity.
# 2. WiFi interface restart:
#    - If there is no connection, it brings the interface down
#      and up, restarts wpa_supplicant, and requests DHCP again.
# 3. Failure counter:
#    - If consecutive failures reach MAX_FAILS (60),
#      increments the restart counter and decides:
#        a) Reboot the system if MAX_RESTARTS (3) is not reached
#        b) Power off the system if restart attempts are exceeded
# 4. Logging:
#    - Logs important events after a minimum number of failures (30)
#      to /opt/wlan.logs.
# 5. Scheduled daily tasks:
#    - Copies specific "best shares" logs to a daily file at 23:59.
#    - Scheduled system reboot at 00:00.
# 6. Multiple instance prevention:
#    - Uses /tmp/watchdog.lock to ensure only one instance runs at a time.
#
# Script structure:
# - create_watchdog(): dynamically generates the internal
#   /bin/watchdog script if it does not exist.
# - start_wifi(): restarts the interface and wpa_supplicant
#   if a connection failure is detected.
###########################################################

WATCHDOG_BIN="/bin/watchdog"

create_watchdog() {
  cat <<'EOF' > "$WATCHDOG_BIN"
#!/bin/sh

LOCK_FILE="/tmp/watchdog.lock"

# Check if itâ€™s already running
if [ -e "$LOCK_FILE" ]; then
  exit 0
fi

touch "$LOCK_FILE"
trap 'rm -f "$LOCK_FILE"; exit' INT TERM EXIT

INTERFACE="wlan0"
WPA_CONF="/opt/wpa_supplicant.conf"
LOG_FILE="/opt/wlan.logs"
COUNT_FILE="/opt/watchdog_fail_count"
REBOOT_HOUR_FILE="/opt/last_reboot_hour"
LAST_COPY_FILE="/opt/last_copy_hour"
MAX_FAILS=60
MAX_RESTARTS=3
MIN_FAILS_TO_LOG=30
FAILS=0
RESTART_COUNT=$(cat "$COUNT_FILE" 2>/dev/null || echo 0)
STABLE_COUNT=0
CONNECTED=0

sleep 15

log() {
  if [ "$FAILS" -ge "$MIN_FAILS_TO_LOG" ]; then
    echo "$(date) - $1" >> "$LOG_FILE"
  fi
}

start_wifi() {
  if ip addr show "$INTERFACE" | grep -q "inet "; then
    return 0
  fi
  ifconfig "$INTERFACE" down
  sleep 1
  ifconfig "$INTERFACE" up
  sleep 2
  iwconfig "$INTERFACE" power off 2>/dev/null
  killall "wpa_supplicant.*-i $INTERFACE"
  wpa_supplicant -B -i "$INTERFACE" -c "$WPA_CONF" >/dev/null 2>&1
  sleep 3
  udhcpc -i "$INTERFACE" >/dev/null 2>&1
  sleep 3
}

check_connection() {
  ip addr show "$INTERFACE" | grep -q "inet " && ping -c 2 -W 2 8.8.8.8 >/dev/null 2>&1
}

sleep 5

while true; do
  if check_connection; then
    STABLE_COUNT=$((STABLE_COUNT + 1))
    if [ "$STABLE_COUNT" -ge 3 ]; then
      CONNECTED=1
      FAILS=0
    fi
  else
    STABLE_COUNT=0
    CONNECTED=0
    FAILS=$((FAILS + 1))
    start_wifi
  fi

  if [ "$FAILS" -ge "$MAX_FAILS" ]; then
    RESTART_COUNT=$((RESTART_COUNT + 1))
    echo "$RESTART_COUNT" > "$COUNT_FILE"
    if [ "$RESTART_COUNT" -ge "$MAX_RESTARTS" ]; then
      log "No internet for 10 mins. Powering off."
      poweroff
    else
      log "No internet for 10 mins. Rebooting. Attempt $RESTART_COUNT"
      reboot
    fi
  fi

  COPY_AT_HOUR="23"
  COPY_AT_MINUTE="59"
  REBOOT_AT_HOUR="00"
  REBOOT_AT_MINUTE="00"

  H=$(date +%H)
  M=$(date +%M)
  CURRENT_HM="${H}:${M}"
  LAST_COPY=$(cat "$LAST_COPY_FILE" 2>/dev/null)
  L=$(cat "$REBOOT_HOUR_FILE" 2>/dev/null)

  if [ -f "$REBOOT_HOUR_FILE" ] && [ "$L" = "$CURRENT_HM" ]; then
    sleep 10
  elif [ "$H" = "$COPY_AT_HOUR" ] && [ "$M" = "$COPY_AT_MINUTE" ] && [ "$LAST_COPY" != "$CURRENT_HM" ]; then
    ZLOG_FILE="/tmp/zlog/run.log"
    OUTPUT_FILE="/opt/best_shares.log"
    DATE_TODAY=$(date +"%Y-%m-%d")
    {
      echo "======= $DATE_TODAY ======="
      grep "New best share" "$ZLOG_FILE" | grep "^$DATE_TODAY" | awk '{print $1, $2, "best share:", $8}'
      echo
    } >> "$OUTPUT_FILE"
    echo "$CURRENT_HM" > "$LAST_COPY_FILE"
  elif [ "$H" = "$REBOOT_AT_HOUR" ] && [ "$M" = "$REBOOT_AT_MINUTE" ] && [ "$L" != "$CURRENT_HM" ]; then
    echo "$CURRENT_HM" > "$REBOOT_HOUR_FILE"
    echo "$(date) - Scheduled reboot at ${CURRENT_HM}" >> "$LOG_FILE"
    sleep 60
    reboot
  else
    if [ "$L" != "" ] && [ "$L" != "$CURRENT_HM" ]; then
      echo "" > "$REBOOT_HOUR_FILE"
    fi
    if [ "$LAST_COPY" != "" ] && [ "$LAST_COPY" != "$CURRENT_HM" ]; then
      echo "" > "$LAST_COPY_FILE"
    fi
    sleep 10
  fi
done
EOF
  chmod +x "$WATCHDOG_BIN"
}

case "$1" in
  start)
    echo "Starting WiFi watchdog..."
    [ ! -f "$WATCHDOG_BIN" ] && create_watchdog
    chmod +x "$WATCHDOG_BIN"
    "$WATCHDOG_BIN" &   # Always run in background
    ;;
  stop)
    echo "Stopping WiFi watchdog..."
    killall watchdog 2>/dev/null
    ;;
  restart)
    $0 stop
    sleep 1
    $0 start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
    ;;
esac

exit 0
